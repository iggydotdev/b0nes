# b0nes Framework

> A zero-dependency SSG/SSR framework with built-in state management and component composition
> GitHub: https://github.com/iggydotdev/b0nes
> npm: https://www.npmjs.com/package/b0nes
> Version: 0.2.0

## Core Philosophy

b0nes is a complete web development toolkit with zero npm dependencies. It provides:
- Server-side rendering (SSR) and static site generation (SSG)
- Component composition (atoms → molecules → organisms)
- Built-in state management (Store)
- Built-in state machines (FSM)
- Client-side progressive enhancement
- Pure JavaScript + JSDoc for type safety

Perfect for: blogs, marketing sites, documentation, landing pages, e-commerce product pages, SaaS applications

## Installation

```bash
git clone https://github.com/iggydotdev/b0nes.git
cd b0nes
# No npm install needed!
```

## Quick Start

```bash
# Development server with hot reload
npm run dev:watch

# Build static site
npm run build

# Run component tests
npm run test

# Generate new component
npm run generate [atom|molecule|organism] [name]
```

## Component Architecture

### Atomic Design Hierarchy
- **Atoms**: Basic elements (button, text, link, input, image, video, etc.)
- **Molecules**: Combinations (card, tabs, modal, dropdown)
- **Organisms**: Page sections (header, footer, hero, cta)

### Available Components

#### Atoms (14 components)
- **accordion**: `{ titleSlot, detailsSlot, className, attrs }`
- **box**: `{ is, slot, className, attrs }` - flexible container (div/section/article/etc)
- **button**: `{ type, slot, className, attrs }`
- **divider**: `{ className, attrs }` - horizontal rule
- **image**: `{ src, alt, className, attrs }`
- **input**: `{ type, className, attrs }`
- **link**: `{ url, slot, className, attrs }`
- **picture**: `{ slot, className, attrs }` - responsive images with source elements
- **source**: `{ type, src, srcset, className, attrs }` - for picture/video elements
- **text**: `{ is, slot, className, attrs }` - any text element (p, h1-h6, span, etc.)
- **textarea**: `{ className, attrs }`
- **video**: `{ src, slot, className, attrs }`

#### Molecules (4 components)
- **card**: `{ slot, headerSlot, mediaSlot, linkSlot, contentSlot, className, attrs }`
- **tabs**: `{ tabs: [{ label, content }], className, attrs }` - requires b0nes.js
- **modal**: `{ id, title, slot, className, attrs }` - requires b0nes.js
- **dropdown**: `{ trigger, slot, className, attrs }` - requires b0nes.js

#### Organisms (4 components)
- **header**: `{ slot, className, attrs }`
- **footer**: `{ slot, className, attrs }`
- **hero**: `{ slot, className, attrs }`
- **cta**: `{ slot, className, attrs }`

### Component API Pattern

ALL components follow this pattern:

```javascript
import { processSlotTrusted } from '../../utils/processSlot.js';
import { normalizeClasses } from '../../utils/normalizeClasses.js';
import { validateProps, validatePropTypes } from '../../utils/componentError.js';

export const componentName = ({
    attrs = '',      // Raw HTML attributes string
    className = '',  // CSS classes
    slot,           // Content (string or array)
    // ... component-specific props
}) => {
    // 1. Validate required props
    validateProps({ slot }, ['slot'], { 
        componentName: 'componentName', 
        componentType: 'atom' 
    });
    
    // 2. Validate prop types
    validatePropTypes({ attrs, className }, { 
        attrs: 'string',
        className: 'string'
    }, { componentName: 'componentName', componentType: 'atom' });
    
    // 3. Process attributes and classes
    attrs = attrs ? ` ${attrs}` : '';
    const classes = normalizeClasses(['base-class', className]);
    
    // 4. Process slot content
    const slotContent = processSlotTrusted(slot);
    
    // 5. Return HTML string
    return `<element class="${classes}"${attrs}>${slotContent}</element>`;
};
```

## Component Usage

### Direct Usage (standalone)
```javascript
import { button } from './components/atoms/button/button.js';

const html = button({ 
    type: 'submit', 
    slot: 'Click Me', 
    className: 'primary' 
});
// Returns: '<button type="submit" class="btn primary">Click Me</button>'
```

### Composition Usage (in pages)
```javascript
// src/framework/pages/home.js
export const components = [
    {
        type: 'organism',
        name: 'hero',
        props: {
            slot: [
                {
                    type: 'atom',
                    name: 'text',
                    props: { is: 'h1', slot: 'Welcome' }
                },
                {
                    type: 'atom',
                    name: 'button',
                    props: { slot: 'Get Started' }
                }
            ]
        }
    }
];
```

## Routing

### Static Routes
```javascript
// src/framework/routes.js
import { URLPattern } from 'node:url';
import { components as homeComponents } from './pages/home.js';

export const routes = [
    {
        name: 'Home',
        pattern: new URLPattern({ pathname: '/' }),
        meta: { title: 'Home' },
        components: homeComponents
    }
];
```

### Dynamic Routes
```javascript
{
    name: 'Blog Post',
    pattern: new URLPattern({ pathname: '/blog/:postid' }),
    meta: { title: 'Blog Post' },
    components: blogPostComponents, // Function: (data) => [components]
    externalData: async () => {
        // Fetch data for this route
        return await fetchBlogPost();
    }
}
```

## Client-Side Interactivity

### b0nes.js Runtime

The framework includes a zero-dependency client-side runtime for progressive enhancement:

```javascript
// Automatically loaded from /b0nes.js
// Discovers components with data-b0nes attribute
// Initializes interactive behaviors

window.b0nes = {
    init(root),           // Initialize components
    destroy(el),          // Destroy component instance
    destroyAll(),         // Destroy all components
    register(name, fn),   // Register custom behavior
    behaviors: {},        // Registered behaviors
    activeInstances: Set  // Active component instances
};
```

### Interactive Components

**Tabs** - Keyboard-accessible tabbed interface
```javascript
{
    type: 'molecule',
    name: 'tabs',
    props: {
        tabs: [
            { label: 'Tab 1', content: '<p>Content 1</p>' },
            { label: 'Tab 2', content: '<p>Content 2</p>' }
        ]
    }
}
```

**Modal** - Accessible dialog with focus management
```javascript
// Modal component
{
    type: 'molecule',
    name: 'modal',
    props: {
        id: 'my-modal',
        title: 'Title',
        slot: '<p>Content</p>'
    }
}

// Trigger button
{
    type: 'atom',
    name: 'button',
    props: {
        attrs: 'data-modal-open="my-modal"',
        slot: 'Open Modal'
    }
}
```

**Dropdown** - Click-to-toggle menu
```javascript
{
    type: 'atom',
    name: 'dropdown',
    props: {
        trigger: 'Menu',
        slot: '<a href="#">Item 1</a><a href="#">Item 2</a>'
    }
}
```

### Disabling Client-Side Runtime

```javascript
// In routes.js
meta: { 
    title: 'My Page',
    interactive: false  // Don't load b0nes.js
}
```

## State Management

### Store - Redux-style State Management

```javascript
import { createStore } from './framework/client/store.js';

const store = createStore({
    state: { count: 0 },
    actions: {
        increment: (state) => ({ count: state.count + 1 }),
        decrement: (state) => ({ count: state.count - 1 }),
        reset: () => ({ count: 0 })
    },
    getters: {
        doubled: (state) => state.count * 2
    }
});

// Usage
store.dispatch('increment');           // Update state
const current = store.getState();      // Get state
const doubled = store.computed('doubled'); // Get computed value

// Subscribe to changes
const unsubscribe = store.subscribe((change) => {
    console.log('State changed:', change);
});
```

### Advanced Store Features

```javascript
// Modules (organize large stores)
import { combineModules, createModule } from './framework/client/store.js';

const userModule = createModule({
    state: { name: '', email: '' },
    actions: {
        updateProfile: (state, data) => ({ ...state, ...data })
    }
});

const cartModule = createModule({
    state: { items: [] },
    actions: {
        addItem: (state, item) => ({ 
            items: [...state.items, item] 
        })
    }
});

const store = createStore(
    combineModules({ user: userModule, cart: cartModule })
);

// Access namespaced
store.dispatch('user/updateProfile', { name: 'John' });
store.dispatch('cart/addItem', { id: 1, name: 'Product' });
```

### Middleware

```javascript
import { 
    loggerMiddleware, 
    persistenceMiddleware 
} from './framework/client/store.js';

const store = createStore({
    state: { cart: [] },
    actions: { /* ... */ },
    middleware: [
        loggerMiddleware,
        persistenceMiddleware('cart-data')
    ]
});
```

## Finite State Machines (FSM)

### Basic FSM

```javascript
import { createFSM } from './framework/client/fsm.js';

const authFSM = createFSM({
    initial: 'logged-out',
    states: {
        'logged-out': {
            on: { LOGIN: 'authenticating' }
        },
        'authenticating': {
            on: { 
                SUCCESS: 'logged-in',
                ERROR: 'logged-out'
            },
            actions: {
                onEntry: (context) => {
                    console.log('Authenticating...');
                }
            }
        },
        'logged-in': {
            on: { LOGOUT: 'logged-out' }
        }
    }
});

// Usage
authFSM.send('LOGIN');              // Transition to 'authenticating'
authFSM.getState();                 // 'authenticating'
authFSM.is('logged-in');            // false
authFSM.can('LOGOUT');              // false (not in logged-in state)
```

### FSM with Guards (Conditional Transitions)

```javascript
const checkoutFSM = createFSM({
    initial: 'cart',
    states: {
        cart: {
            on: { 
                CHECKOUT: (context, data) => {
                    // Guard: only proceed if cart has items
                    return context.cartItems.length > 0 
                        ? 'shipping' 
                        : 'cart';
                }
            }
        },
        shipping: {
            on: { CONTINUE: 'payment', BACK: 'cart' }
        },
        payment: {
            on: { SUCCESS: 'complete', ERROR: 'payment' }
        },
        complete: {}
    },
    context: { cartItems: [] }
});
```

### FSM + Store Integration

```javascript
import { connectStoreToFSM } from './framework/client/store.js';

const store = createStore({
    state: { step: 'cart', formData: {} },
    actions: {
        updateFormData: (state, data) => ({ 
            formData: { ...state.formData, ...data } 
        })
    }
});

const fsm = createFSM({
    initial: 'cart',
    states: { /* ... */ }
});

// Sync FSM state to store
const disconnect = connectStoreToFSM(store, fsm);
```

### Composed FSM (Parallel State Machines)

```javascript
import { composeFSM } from './framework/client/fsm.js';

const machines = composeFSM({
    auth: authFSM,
    checkout: checkoutFSM
});

// Get all states
machines.getAllStates(); // { auth: 'logged-in', checkout: 'cart' }

// Send to specific machine
machines.send('auth', 'LOGOUT');

// Broadcast to all machines
machines.broadcast('RESET');
```

## Key Functions

### compose(components)
Converts component tree to HTML strings.

```javascript
import { compose } from './framework/compose.js';

const html = compose([
    { type: 'atom', name: 'text', props: { is: 'p', slot: 'Hello' } }
]);
```

### renderPage(content, meta)
Wraps content in full HTML document.

```javascript
import { renderPage } from './framework/renderPage.js';

const html = renderPage(content, { 
    title: 'My Page',
    interactive: true  // Include b0nes.js (default)
});
```

### router(url, routes)
Matches URL to route definition.

```javascript
import { router } from './framework/router.js';

const route = router(new URL('http://localhost/'), routes);
// Returns: { params, query, meta, components, ... }
```

## Component Generator

```bash
# Generate new atom
npm run generate atom badge

# Generate new molecule
npm run generate molecule card-list

# Generate new organism
npm run generate organism sidebar
```

Creates:
```
src/components/atoms/badge/
├── index.js
├── badge.js
└── badge.test.js
```

## Testing

### Component Tests

```javascript
// component.test.js
export const test = () => {
    const actual = component({ slot: 'Test' });
    const expected = '<div class="component">Test</div>';
    return actual === expected ? true : console.error({actual, expected}) || false;
};
```

Run tests:
```bash
npm run test
```

## Building & Deployment

### SSG Build
```bash
npm run build
# Outputs to public/
```

### Project Structure After Build
```
public/
├── index.html           # Homepage
├── demo/
│   └── index.html       # Demo page
└── blog/
    └── [postid]/
        └── index.html   # Dynamic routes
```

### Deployment
Serve the `public/` directory on any static host:
- Netlify: Drag & drop `public/` folder
- Vercel: `vercel --prod`
- GitHub Pages: Push `public/` to gh-pages branch
- Cloudflare Pages: Connect repository

## Utility Functions

### processSlot(slot, options)
Handles slot content with HTML escaping for user input.

```javascript
import { processSlot, processSlotTrusted } from './components/utils/processSlot.js';

// Escapes HTML (for user input)
const safe = processSlot('<script>alert(1)</script>');
// Returns: '&lt;script&gt;alert(1)&lt;/script&gt;'

// Trusts HTML (for component content)
const trusted = processSlotTrusted('<button>Click</button>');
// Returns: '<button>Click</button>'
```

### normalizeClasses(classes)
Normalizes and escapes CSS class names.

```javascript
import { normalizeClasses } from './components/utils/normalizeClasses.js';

normalizeClasses(['btn', 'primary', '', 'large']);
// Returns: 'btn primary large'

normalizeClasses('btn  primary   large');
// Returns: 'btn primary large'
```

### validateProps(props, required, context)
Validates required props and throws descriptive errors.

```javascript
import { validateProps } from './components/utils/componentError.js';

validateProps(
    { slot: 'text' },
    ['slot', 'url'],
    { componentName: 'link', componentType: 'atom' }
);
// Throws: ComponentError with details about missing 'url' prop
```

## Important Constraints

### NO CSS Included (By Design)
b0nes provides HTML structure only. Users choose their own CSS strategy:
- Tailwind CSS
- Vanilla CSS
- CSS Modules
- Any CSS framework

This avoids:
- Forced design opinions
- CSS specificity conflicts
- Breaking changes on updates
- Bundle bloat

### Security: XSS Protection
- `processSlotTrusted()` - For component-rendered HTML (trusted)
- `processSlot()` with `escape: true` - For user input (escaped)
- `escapeHtml()` / `escapeAttr()` - Available for manual escaping

### NO Client-Side JavaScript Required
- Server-rendered HTML works without JavaScript
- Progressive enhancement with b0nes.js
- Interactive components degrade gracefully

### Zero Dependencies
- Entire framework runs on Node.js built-ins only
- No npm packages required
- No build tools needed (except for production optimization)

## Common Patterns

### Nested Components
```javascript
{
    type: 'organism',
    name: 'card',
    props: {
        slot: [
            { type: 'atom', name: 'text', props: { is: 'h2', slot: 'Title' }},
            { type: 'atom', name: 'text', props: { is: 'p', slot: 'Content' }}
        ]
    }
}
```

### Conditional Rendering
```javascript
const components = [
    showHeader && { type: 'organism', name: 'header', props: {...} },
    { type: 'organism', name: 'hero', props: {...} }
].filter(Boolean);
```

### Custom Styling
```javascript
button({
    slot: 'Styled',
    className: 'btn-primary large',
    attrs: 'style="background: blue"'
})
```

### Multi-Step Forms with FSM + Store
```javascript
const formFSM = createFSM({
    initial: 'step1',
    states: {
        step1: { on: { NEXT: 'step2' } },
        step2: { on: { NEXT: 'step3', BACK: 'step1' } },
        step3: { on: { SUBMIT: 'complete' } }
    }
});

const formStore = createStore({
    state: { step1Data: {}, step2Data: {}, step3Data: {} },
    actions: {
        updateStep1: (state, data) => ({ step1Data: { ...state.step1Data, ...data } })
    }
});

connectStoreToFSM(formStore, formFSM);
```

## Troubleshooting

### "Component not found in library"
- Component must be registered in `atoms/index.js`, `molecules/index.js`, or `organisms/index.js`
- Check component name matches exactly

### Tests failing
- String comparison is exact (whitespace matters)
- Check expected output format carefully

### Build fails
- Check `route.components` is array (or function returning array for dynamic routes)
- Verify all required props are provided

### Client-side components not working
- Check if b0nes.js is loaded (`meta.interactive !== false`)
- Verify component has `data-b0nes` attribute
- Check browser console for initialization errors

## Code Style

- Use JSDoc for documentation
- Follow atomic design principles
- Keep components pure (no side effects)
- Validate props at component start
- Use `processSlotTrusted()` for component content
- Use `normalizeClasses()` for class handling
- Return template literals for HTML

## What b0nes Is

✅ Complete web development toolkit with zero dependencies
✅ SSG/SSR framework with built-in state management
✅ Component composition system (atomic design)
✅ Progressive enhancement with client-side runtime
✅ State machines for flow control
✅ For content-heavy sites and web applications

## What b0nes Is NOT

❌ Not a CSS framework (bring your own styles)
❌ Not trying to replace React/Vue for complex SPAs
❌ Not for real-time applications
❌ Not opinionated about styling

## Version Info

Current: v0.2.0
Node: >=24.0.0
License: MIT

## Links

- GitHub: https://github.com/iggydotdev/b0nes
- Issues: https://github.com/iggydotdev/b0nes/issues
- npm: https://www.npmjs.com/package/b0nes

---

**When helping users with b0nes:**
1. It's a complete toolkit (components + routing + state + FSM)
2. Zero dependencies = suggest pure JS solutions only
3. Components return HTML strings, not JSX
4. FSM for flow control, Store for data management
5. No CSS included - users choose their own strategy
6. Progressive enhancement pattern (works without JS, better with JS)
7. Point to component generator for new components
8. Encourage atomic design patterns (atoms → molecules → organisms)